// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace F16.StreamedTextures
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct StreamedTexture : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static StreamedTexture GetRootAsStreamedTexture(ByteBuffer _bb) { return GetRootAsStreamedTexture(_bb, new StreamedTexture()); }
  public static StreamedTexture GetRootAsStreamedTexture(ByteBuffer _bb, StreamedTexture obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StreamedTexture __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public F16.StreamedTextures.TextureIdentifier Id { get { int o = __p.__offset(4); return o != 0 ? (F16.StreamedTextures.TextureIdentifier)__p.bb.GetSbyte(o + __p.bb_pos) : F16.StreamedTextures.TextureIdentifier.None; } }
  public sbyte Payload(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int PayloadLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<sbyte> GetPayloadBytes() { return __p.__vector_as_span<sbyte>(6, 1); }
#else
  public ArraySegment<byte>? GetPayloadBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public sbyte[] GetPayloadArray() { return __p.__vector_as_array<sbyte>(6); }
  public F16.StreamedTextures.TextureCompression Compression { get { int o = __p.__offset(8); return o != 0 ? (F16.StreamedTextures.TextureCompression)__p.bb.GetSbyte(o + __p.bb_pos) : F16.StreamedTextures.TextureCompression.None; } }

  public static Offset<F16.StreamedTextures.StreamedTexture> CreateStreamedTexture(FlatBufferBuilder builder,
      F16.StreamedTextures.TextureIdentifier id = F16.StreamedTextures.TextureIdentifier.None,
      VectorOffset payloadOffset = default(VectorOffset),
      F16.StreamedTextures.TextureCompression compression = F16.StreamedTextures.TextureCompression.None) {
    builder.StartTable(3);
    StreamedTexture.AddPayload(builder, payloadOffset);
    StreamedTexture.AddCompression(builder, compression);
    StreamedTexture.AddId(builder, id);
    return StreamedTexture.EndStreamedTexture(builder);
  }

  public static void StartStreamedTexture(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, F16.StreamedTextures.TextureIdentifier id) { builder.AddSbyte(0, (sbyte)id, 0); }
  public static void AddPayload(FlatBufferBuilder builder, VectorOffset payloadOffset) { builder.AddOffset(1, payloadOffset.Value, 0); }
  public static VectorOffset CreatePayloadVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePayloadVectorBlock(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartPayloadVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddCompression(FlatBufferBuilder builder, F16.StreamedTextures.TextureCompression compression) { builder.AddSbyte(2, (sbyte)compression, 0); }
  public static Offset<F16.StreamedTextures.StreamedTexture> EndStreamedTexture(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<F16.StreamedTextures.StreamedTexture>(o);
  }
};


}
