// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace F16.StreamedTextures
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RequestTexture : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RequestTexture GetRootAsRequestTexture(ByteBuffer _bb) { return GetRootAsRequestTexture(_bb, new RequestTexture()); }
  public static RequestTexture GetRootAsRequestTexture(ByteBuffer _bb, RequestTexture obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RequestTexture __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public F16.StreamedTextures.TextureIdentifier Id { get { int o = __p.__offset(4); return o != 0 ? (F16.StreamedTextures.TextureIdentifier)__p.bb.GetSbyte(o + __p.bb_pos) : F16.StreamedTextures.TextureIdentifier.None; } }
  public F16.StreamedTextures.TextureCompression Compression { get { int o = __p.__offset(6); return o != 0 ? (F16.StreamedTextures.TextureCompression)__p.bb.GetSbyte(o + __p.bb_pos) : F16.StreamedTextures.TextureCompression.None; } }

  public static Offset<F16.StreamedTextures.RequestTexture> CreateRequestTexture(FlatBufferBuilder builder,
      F16.StreamedTextures.TextureIdentifier id = F16.StreamedTextures.TextureIdentifier.None,
      F16.StreamedTextures.TextureCompression compression = F16.StreamedTextures.TextureCompression.None) {
    builder.StartTable(2);
    RequestTexture.AddCompression(builder, compression);
    RequestTexture.AddId(builder, id);
    return RequestTexture.EndRequestTexture(builder);
  }

  public static void StartRequestTexture(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddId(FlatBufferBuilder builder, F16.StreamedTextures.TextureIdentifier id) { builder.AddSbyte(0, (sbyte)id, 0); }
  public static void AddCompression(FlatBufferBuilder builder, F16.StreamedTextures.TextureCompression compression) { builder.AddSbyte(1, (sbyte)compression, 0); }
  public static Offset<F16.StreamedTextures.RequestTexture> EndRequestTexture(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<F16.StreamedTextures.RequestTexture>(o);
  }
};


}
