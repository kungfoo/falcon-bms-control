-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: StreamedTextures

local flatbuffers = require('flatbuffers')

local RequestTexture = {} -- the module
local RequestTexture_mt = {} -- the class metatable

function RequestTexture.New()
    local o = {}
    setmetatable(o, {__index = RequestTexture_mt})
    return o
end
function RequestTexture.GetRootAsRequestTexture(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = RequestTexture.New()
    o:Init(buf, n + offset)
    return o
end
function RequestTexture_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function RequestTexture_mt:Id()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int8, o + self.view.pos)
    end
    return 0
end
function RequestTexture_mt:Compression()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int8, o + self.view.pos)
    end
    return 0
end
function RequestTexture.Start(builder) builder:StartObject(2) end
function RequestTexture.AddId(builder, id) builder:PrependInt8Slot(0, id, 0) end
function RequestTexture.AddCompression(builder, compression) builder:PrependInt8Slot(1, compression, 0) end
function RequestTexture.End(builder) return builder:EndObject() end

return RequestTexture -- return the module