-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: StreamedTextures

local flatbuffers = require('flatbuffers')

local StreamedTexture = {} -- the module
local StreamedTexture_mt = {} -- the class metatable

function StreamedTexture.New()
    local o = {}
    setmetatable(o, {__index = StreamedTexture_mt})
    return o
end
function StreamedTexture.GetRootAsStreamedTexture(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = StreamedTexture.New()
    o:Init(buf, n + offset)
    return o
end
function StreamedTexture_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function StreamedTexture_mt:Id()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int8, o + self.view.pos)
    end
    return 0
end
function StreamedTexture_mt:Payload(j)
    local o = self.view:Offset(6)
    if o ~= 0 then
        local a = self.view:Vector(o)
        return self.view:Get(flatbuffers.N.Int8, a + ((j-1) * 1))
    end
    return 0
end
function StreamedTexture_mt:PayloadLength()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:VectorLen(o)
    end
    return 0
end
function StreamedTexture_mt:Compression()
    local o = self.view:Offset(8)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int8, o + self.view.pos)
    end
    return 0
end
function StreamedTexture.Start(builder) builder:StartObject(3) end
function StreamedTexture.AddId(builder, id) builder:PrependInt8Slot(0, id, 0) end
function StreamedTexture.AddPayload(builder, payload) builder:PrependUOffsetTRelativeSlot(1, payload, 0) end
function StreamedTexture.StartPayloadVector(builder, numElems) return builder:StartVector(1, numElems, 1) end
function StreamedTexture.AddCompression(builder, compression) builder:PrependInt8Slot(2, compression, 0) end
function StreamedTexture.End(builder) return builder:EndObject() end

return StreamedTexture -- return the module